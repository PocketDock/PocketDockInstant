// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PocketDockUI.Data;

#nullable disable

namespace PocketDockUI.Data.Migrations
{
    [DbContext(typeof(PocketDockContext))]
    partial class PocketDockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PocketDockUI.Data.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<int>("GameServerPortRangeEnd")
                        .HasColumnType("integer");

                    b.Property<int>("GameServerPortRangeStart")
                        .HasColumnType("integer");

                    b.Property<string>("PrivateIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("ServerAssignmentId")
                        .HasColumnType("text");

                    b.Property<string>("ServerId")
                        .HasColumnType("text");

                    b.Property<string>("TriggerIpAddress")
                        .HasColumnType("text");

                    b.Property<int>("TriggerPort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServerAssignmentId");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("PocketDockUI.Data.Models.ServerAssignment", b =>
                {
                    b.Property<string>("AssignedUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedUserIpAddress")
                        .HasColumnType("text");

                    b.Property<int?>("GameServerPort")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SelectedVersion")
                        .HasColumnType("text");

                    b.Property<string>("ServerPass")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AssignedUserId");

                    b.ToTable("ServerAssignment");
                });

            modelBuilder.Entity("PocketDockUI.Data.Models.Server", b =>
                {
                    b.HasOne("PocketDockUI.Data.Models.ServerAssignment", "ServerAssignment")
                        .WithMany()
                        .HasForeignKey("ServerAssignmentId");

                    b.Navigation("ServerAssignment");
                });
#pragma warning restore 612, 618
        }
    }
}
